test_docker:
    image: docker
    services:
        - docker:dind
        
    script:
        - apk add --no-cache py-pip
        - pip install docker-compose
        - docker-compose -f docker/dev/docker-compose.yml rm -v
        - docker-compose -f docker/dev/docker-compose.yml up -d
        - docker ps
        - docker run --rm -v "$(pwd)":/opt/maven -w /opt/maven maven:3.3.9-jdk-8 mvn --file src/pom.xml -X install -P test-consumer,test-business
        - docker-compose -f docker/dev/docker-compose.yml stop
        - docker-compose -f docker/dev/docker-compose.yml rm -f
        - docker-compose -f docker/dev/docker-compose.yml up -d
        - docker-compose -f docker/dev/docker-compose.yml ps





image: maven:3.3.9-jdk-8

stages:
  - prepare
  - build

services:
  - postgres:9.4
  - docker:dind

variables:
# Postgres container config, this sets up our test instance with a fresh database and the defined user
    POSTGRES_DB: db_myerp
    POSTGRES_USER: usr_myerp
    POSTGRES_PASSWORD: "myerp"
# Maven config
# This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
# `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
# As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
# when running from the command line.
# `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
    paths:
        - .m2/repository

prepare_db:
  stage: prepare
  image: docker
  script:
        - apk add --no-cache py-pip
        - pip install docker-compose
        - docker-compose -f docker/dev/docker-compose.yml rm -v
        - docker-compose -f docker/dev/docker-compose.yml up -d

build:
  stage: build
  image: docker
  script:
  - docker ps
  - mvn --file src/pom.xml -X install -P test-consumer,test-business -DargLine="-Dspring.profiles.active=ci"
